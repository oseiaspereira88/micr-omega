import { describe, expect, it, vi } from "vitest";
import type { DurableObjectState } from "@cloudflare/workers-types";

import { RoomDO } from "../src/RoomDO";
import type { Env } from "../src";
import { MockDurableObjectState } from "./utils/mock-state";
import { createMockSocket } from "./utils/mock-socket";

async function createRoom() {
  const mockState = new MockDurableObjectState();
  const room = new RoomDO(mockState as unknown as DurableObjectState, {} as Env);
  const roomAny = room as any;
  await roomAny.ready;
  return { roomAny } as const;
}

describe("RoomDO reconnection invulnerability handling", () => {
  it("clears expired invulnerability when reconnecting", async () => {
    const originalWebSocket = (globalThis as any).WebSocket;
    const websocketMock = { OPEN: 1, CLOSING: 2, CLOSED: 3 };
    (globalThis as any).WebSocket = websocketMock;

    const dateSpy = vi.spyOn(Date, "now");
    let currentTime = 1_000_000;
    dateSpy.mockImplementation(() => currentTime);

    try {
      const { roomAny } = await createRoom();
      const initialSocket = createMockSocket();
      const playerId = await roomAny.handleJoin(initialSocket, { type: "join", name: "Player" });
      expect(typeof playerId === "string").toBe(true);

      const player = roomAny.players.get(playerId);
      expect(player).toBeDefined();
      if (!player) {
        throw new Error("Player not found after join");
      }

      const reconnectToken = player.reconnectToken;
      expect(typeof reconnectToken === "string").toBe(true);

      const expiredAt = currentTime + 2_000;
      player.invulnerableUntil = expiredAt;
      player.connected = false;

      const reconnectTime = expiredAt + 5_000;
      currentTime = reconnectTime;

      const reconnectSocket = createMockSocket();
      const result = await roomAny.handleJoin(reconnectSocket, {
        type: "join",
        name: "Player",
        playerId,
        reconnectToken,
      });

      expect(result).toBe(playerId);

      const updatedPlayer = roomAny.players.get(playerId);
      expect(updatedPlayer?.invulnerableUntil).toBeNull();
    } finally {
      dateSpy.mockRestore();
      (globalThis as any).WebSocket = originalWebSocket;
    }
  });

  it("reduces active invulnerability by the offline duration", async () => {
    const originalWebSocket = (globalThis as any).WebSocket;
    const websocketMock = { OPEN: 1, CLOSING: 2, CLOSED: 3 };
    (globalThis as any).WebSocket = websocketMock;

    const dateSpy = vi.spyOn(Date, "now");
    let currentTime = 2_000_000;
    dateSpy.mockImplementation(() => currentTime);

    try {
      const { roomAny } = await createRoom();
      const initialSocket = createMockSocket();
      const playerId = await roomAny.handleJoin(initialSocket, { type: "join", name: "Player" });
      expect(typeof playerId === "string").toBe(true);

      const player = roomAny.players.get(playerId);
      expect(player).toBeDefined();
      if (!player) {
        throw new Error("Player not found after join");
      }

      const reconnectToken = player.reconnectToken;
      expect(typeof reconnectToken === "string").toBe(true);

      const remainingDuration = 10_000;
      player.invulnerableUntil = currentTime + remainingDuration;
      const originalInvulnerableUntil = player.invulnerableUntil!;
      player.connected = false;

      const offlineDuration = 4_000;
      currentTime += offlineDuration;

      const reconnectSocket = createMockSocket();
      const result = await roomAny.handleJoin(reconnectSocket, {
        type: "join",
        name: "Player",
        playerId,
        reconnectToken,
      });

      expect(result).toBe(playerId);

      const updatedPlayer = roomAny.players.get(playerId);
      if (!updatedPlayer) {
        throw new Error("Player not found after reconnect");
      }

      expect(updatedPlayer.lastSeenAt).toBe(currentTime);
      expect(updatedPlayer.invulnerableUntil).toBe(originalInvulnerableUntil - offlineDuration);
      expect(updatedPlayer.invulnerableUntil).toBeGreaterThan(currentTime);
    } finally {
      dateSpy.mockRestore();
      (globalThis as any).WebSocket = originalWebSocket;
    }
  });
});
